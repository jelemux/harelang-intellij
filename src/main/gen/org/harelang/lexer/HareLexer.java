/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.harelang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.harelang.parser.psi.HareTypes;
import org.harelang.parser.psi.HareElementType;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>harelang.flex</tt>
 */
class HareLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\5\3\7\22\0\1\10\1\41\1\6\2\0\1\26\1\27\1\0\1\44\1\45\1\25\1\30"+
    "\1\37\1\35\1\50\1\4\1\12\1\21\1\60\1\57\1\61\1\14\1\56\1\14\1\55\1\3\1\40"+
    "\1\36\1\33\1\24\1\34\1\51\1\22\6\16\24\1\1\42\1\0\1\43\1\31\1\2\1\0\1\52\1"+
    "\20\1\73\1\75\1\66\1\17\1\100\1\74\1\54\1\1\1\102\1\71\1\77\1\63\1\13\1\67"+
    "\1\1\1\70\1\53\1\64\1\62\1\72\1\101\1\15\1\76\1\65\1\46\1\32\1\47\1\23\6\0"+
    "\1\7\32\0\1\10\77\0\12\11\46\0\12\11\14\0\12\11\20\0\12\11\6\0\12\11\6\0\13"+
    "\10\35\0\2\7\5\0\1\10\57\0\1\10\26\0\12\11\16\0\62\11");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\4\3\2\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\16\2\1\37\1\40\1\0\1\41\3\0"+
    "\6\2\1\42\3\2\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\2\1\66"+
    "\5\2\1\67\1\2\1\70\1\71\6\2\1\72\26\2"+
    "\1\37\1\73\1\74\1\75\1\2\1\76\2\2\1\77"+
    "\1\100\3\2\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\6\2\1\107\1\2\1\110\1\111\1\112\2\2\1\113"+
    "\1\114\1\115\1\2\1\116\1\117\13\2\1\120\1\121"+
    "\10\2\1\122\5\2\1\123\1\124\1\125\5\2\1\126"+
    "\4\2\1\127\1\130\2\2\1\131\1\132\1\133\1\134"+
    "\1\2\1\135\1\136\1\137\1\2\1\140\6\2\1\141"+
    "\1\142\5\2\1\143\1\144\1\145\2\2\1\146\5\2"+
    "\1\147\4\2\1\150\1\2\1\151\1\2\1\152\1\2"+
    "\1\153\1\2\1\154\1\155\1\156\1\157\1\160\1\161"+
    "\1\162\1\163\1\164\3\2\1\165\1\166\1\2\1\167"+
    "\1\2\1\170\1\171\2\2\1\172\1\2\1\173\1\174"+
    "\1\175";

  private static int [] zzUnpackAction() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\206\0\311\0\u010c\0\103\0\u014f"+
    "\0\u0192\0\u01d5\0\u0218\0\u025b\0\103\0\103\0\u029e\0\u02e1"+
    "\0\u0324\0\u0367\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9"+
    "\0\103\0\103\0\u053c\0\u057f\0\103\0\103\0\103\0\103"+
    "\0\103\0\103\0\u05c2\0\103\0\u0605\0\u0648\0\u068b\0\u06ce"+
    "\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6"+
    "\0\u0929\0\u096c\0\u09af\0\103\0\u014f\0\u014f\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\206"+
    "\0\u0c4d\0\u0c90\0\u0cd3\0\103\0\103\0\103\0\103\0\103"+
    "\0\u0d16\0\103\0\103\0\u0d59\0\103\0\u0d9c\0\103\0\u0ddf"+
    "\0\103\0\u0e22\0\103\0\103\0\103\0\u0e65\0\u0ea8\0\u0eeb"+
    "\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\206\0\u107d\0\206"+
    "\0\206\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\206"+
    "\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427"+
    "\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f"+
    "\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\103\0\u09f2"+
    "\0\u0a35\0\u0a78\0\u1814\0\206\0\u1857\0\u189a\0\206\0\206"+
    "\0\u18dd\0\u1920\0\u1963\0\103\0\103\0\103\0\103\0\103"+
    "\0\103\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38"+
    "\0\u1b7b\0\206\0\206\0\206\0\u1bbe\0\u1c01\0\206\0\206"+
    "\0\206\0\u1c44\0\206\0\206\0\u1c87\0\u1cca\0\u1d0d\0\u1d50"+
    "\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\206"+
    "\0\206\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa"+
    "\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\206"+
    "\0\206\0\206\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\206"+
    "\0\u2461\0\u24a4\0\u24e7\0\u252a\0\206\0\u256d\0\u25b0\0\u25f3"+
    "\0\u2636\0\206\0\206\0\206\0\u2679\0\206\0\206\0\206"+
    "\0\u26bc\0\206\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e"+
    "\0\206\0\206\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\206"+
    "\0\206\0\206\0\u29e0\0\u2a23\0\206\0\u2a66\0\u2aa9\0\u2aec"+
    "\0\u2b2f\0\u2b72\0\206\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\206"+
    "\0\u2cc1\0\206\0\u2d04\0\206\0\u2d47\0\206\0\u2d8a\0\206"+
    "\0\206\0\206\0\206\0\206\0\206\0\206\0\206\0\206"+
    "\0\u2dcd\0\u2e10\0\u2e53\0\206\0\206\0\u2e96\0\206\0\u2ed9"+
    "\0\206\0\206\0\u2f1c\0\u2f5f\0\206\0\u2fa2\0\206\0\206"+
    "\0\206";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\7"+
    "\1\5\1\11\1\12\1\5\2\3\1\13\1\14\1\5"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\5\5\1\50\1\51\1\52\1\3"+
    "\1\53\1\3\1\54\1\55\1\56\1\57\1\3\1\60"+
    "\1\61\1\62\3\3\104\0\3\3\6\0\10\3\30\0"+
    "\31\3\3\0\1\5\5\0\2\5\1\0\1\5\4\0"+
    "\1\5\33\0\5\5\25\0\1\63\17\0\1\64\56\0"+
    "\5\65\1\0\1\66\1\0\73\65\3\0\1\5\5\0"+
    "\2\5\1\67\1\5\1\70\2\0\1\71\1\5\33\0"+
    "\5\5\22\0\3\3\6\0\5\3\1\72\2\3\30\0"+
    "\31\3\1\0\3\3\6\0\1\3\1\73\6\3\30\0"+
    "\1\74\1\3\1\75\1\3\1\76\1\77\3\3\1\100"+
    "\4\3\1\101\12\3\1\0\3\3\6\0\1\3\1\102"+
    "\6\3\30\0\16\3\1\103\12\3\24\0\1\104\7\0"+
    "\1\105\72\0\1\106\102\0\1\107\102\0\1\110\2\0"+
    "\1\111\77\0\1\112\102\0\1\113\4\0\1\114\75\0"+
    "\1\115\5\0\1\116\74\0\1\117\6\0\1\120\73\0"+
    "\1\121\7\0\1\122\72\0\1\123\116\0\1\124\66\0"+
    "\1\125\126\0\1\126\33\0\3\3\6\0\6\3\1\127"+
    "\1\3\30\0\1\3\1\130\13\3\1\131\1\3\1\132"+
    "\11\3\1\0\3\3\6\0\10\3\30\0\2\3\1\133"+
    "\7\3\1\134\14\3\1\135\1\3\1\0\3\3\6\0"+
    "\5\3\1\136\1\3\1\137\30\0\1\3\1\140\1\3"+
    "\1\141\1\142\1\143\3\3\1\144\17\3\1\0\3\3"+
    "\6\0\7\3\1\145\30\0\1\3\1\146\1\147\1\150"+
    "\1\151\1\152\3\3\1\153\17\3\1\0\3\3\6\0"+
    "\1\3\1\154\6\3\30\0\10\3\1\155\20\3\1\0"+
    "\3\3\6\0\10\3\30\0\14\3\1\156\1\3\1\157"+
    "\5\3\1\160\4\3\1\0\3\3\6\0\3\3\1\161"+
    "\4\3\30\0\11\3\1\162\5\3\1\163\11\3\1\0"+
    "\3\3\6\0\10\3\30\0\10\3\1\164\3\3\1\165"+
    "\14\3\1\0\3\3\6\0\10\3\30\0\14\3\1\166"+
    "\14\3\1\0\3\3\6\0\1\3\1\167\6\3\30\0"+
    "\1\170\30\3\1\0\3\3\6\0\1\3\1\171\6\3"+
    "\30\0\1\172\21\3\1\173\6\3\1\0\3\3\6\0"+
    "\10\3\30\0\14\3\1\174\14\3\1\0\3\3\6\0"+
    "\10\3\30\0\2\3\1\175\26\3\1\0\3\3\6\0"+
    "\10\3\30\0\1\176\30\3\5\63\1\177\75\63\12\0"+
    "\1\200\1\0\1\200\4\0\1\200\34\0\4\200\24\0"+
    "\1\201\6\0\1\201\1\0\1\201\1\0\4\201\30\0"+
    "\1\201\2\0\5\201\4\0\1\201\4\0\1\201\1\0"+
    "\1\201\17\0\1\202\6\0\1\202\62\0\3\3\6\0"+
    "\5\3\1\203\2\3\30\0\31\3\1\0\3\3\6\0"+
    "\10\3\30\0\16\3\1\204\12\3\1\0\3\3\6\0"+
    "\10\3\30\0\17\3\1\205\11\3\1\0\3\3\6\0"+
    "\10\3\30\0\11\3\1\206\17\3\1\0\3\3\6\0"+
    "\10\3\30\0\7\3\1\207\21\3\1\0\3\3\6\0"+
    "\10\3\30\0\6\3\1\210\22\3\1\0\3\3\6\0"+
    "\10\3\30\0\14\3\1\211\14\3\1\0\3\3\6\0"+
    "\1\3\1\212\6\3\30\0\31\3\1\0\3\3\6\0"+
    "\10\3\30\0\14\3\1\213\14\3\24\0\1\214\102\0"+
    "\1\215\102\0\1\216\102\0\1\217\102\0\1\220\126\0"+
    "\1\221\33\0\3\3\6\0\1\3\1\222\6\3\30\0"+
    "\31\3\1\0\3\3\6\0\10\3\30\0\1\3\1\223"+
    "\27\3\1\0\3\3\6\0\10\3\30\0\15\3\1\224"+
    "\13\3\1\0\3\3\6\0\10\3\30\0\17\3\1\225"+
    "\11\3\1\0\3\3\6\0\10\3\30\0\13\3\1\226"+
    "\15\3\1\0\3\3\6\0\10\3\30\0\1\227\15\3"+
    "\1\230\12\3\1\0\3\3\6\0\10\3\30\0\2\3"+
    "\1\231\26\3\1\0\3\3\6\0\10\3\30\0\4\3"+
    "\1\232\24\3\1\0\3\3\6\0\10\3\30\0\7\3"+
    "\1\233\21\3\1\0\3\3\6\0\10\3\30\0\6\3"+
    "\1\234\22\3\1\0\3\3\6\0\10\3\30\0\1\3"+
    "\1\235\1\236\7\3\1\237\16\3\1\0\3\3\6\0"+
    "\10\3\30\0\4\3\1\240\24\3\1\0\3\3\6\0"+
    "\10\3\30\0\14\3\1\241\14\3\1\0\3\3\6\0"+
    "\10\3\30\0\11\3\1\242\17\3\1\0\3\3\6\0"+
    "\10\3\30\0\7\3\1\243\21\3\1\0\3\3\6\0"+
    "\10\3\30\0\6\3\1\244\22\3\1\0\3\3\6\0"+
    "\10\3\30\0\2\3\1\245\26\3\1\0\3\3\6\0"+
    "\10\3\30\0\16\3\1\246\12\3\1\0\3\3\6\0"+
    "\10\3\30\0\17\3\1\247\11\3\1\0\3\3\6\0"+
    "\10\3\30\0\1\3\1\250\27\3\1\0\3\3\6\0"+
    "\10\3\30\0\10\3\1\251\20\3\1\0\3\3\6\0"+
    "\10\3\30\0\15\3\1\252\13\3\1\0\3\3\6\0"+
    "\10\3\30\0\15\3\1\253\13\3\1\0\3\3\6\0"+
    "\10\3\30\0\10\3\1\254\20\3\1\0\3\3\6\0"+
    "\10\3\30\0\1\3\1\255\27\3\1\0\3\3\6\0"+
    "\10\3\30\0\11\3\1\256\17\3\1\0\3\3\6\0"+
    "\10\3\30\0\12\3\1\257\16\3\1\0\3\3\6\0"+
    "\10\3\30\0\11\3\1\260\1\261\16\3\1\0\3\3"+
    "\6\0\10\3\30\0\2\3\1\262\26\3\1\0\3\3"+
    "\6\0\10\3\30\0\1\263\1\264\12\3\1\265\2\3"+
    "\1\266\11\3\1\0\3\3\6\0\10\3\30\0\11\3"+
    "\1\267\17\3\1\0\3\3\6\0\10\3\30\0\1\3"+
    "\1\270\27\3\1\0\3\3\6\0\10\3\30\0\1\271"+
    "\30\3\1\0\3\3\6\0\5\3\1\272\2\3\30\0"+
    "\17\3\1\273\11\3\1\0\3\3\6\0\10\3\30\0"+
    "\14\3\1\274\14\3\1\0\3\3\6\0\10\3\30\0"+
    "\12\3\1\275\16\3\1\0\3\3\6\0\10\3\30\0"+
    "\1\3\1\276\27\3\1\0\3\3\6\0\10\3\30\0"+
    "\1\3\1\277\27\3\1\0\3\3\6\0\10\3\30\0"+
    "\2\3\1\300\26\3\1\0\3\3\6\0\10\3\30\0"+
    "\14\3\1\301\14\3\1\0\3\3\6\0\10\3\30\0"+
    "\17\3\1\302\11\3\1\0\3\3\6\0\10\3\30\0"+
    "\1\303\30\3\1\0\3\3\6\0\10\3\30\0\16\3"+
    "\1\304\12\3\1\0\3\3\6\0\10\3\30\0\14\3"+
    "\1\305\14\3\1\0\3\3\6\0\10\3\30\0\14\3"+
    "\1\306\14\3\1\0\3\3\6\0\1\3\1\307\6\3"+
    "\30\0\31\3\1\0\3\3\6\0\10\3\30\0\14\3"+
    "\1\310\14\3\1\0\3\3\6\0\10\3\30\0\12\3"+
    "\1\311\16\3\1\0\3\3\6\0\10\3\30\0\10\3"+
    "\1\312\20\3\1\0\3\3\6\0\10\3\30\0\12\3"+
    "\1\313\16\3\1\0\3\3\6\0\10\3\30\0\14\3"+
    "\1\314\14\3\1\0\3\3\6\0\10\3\30\0\12\3"+
    "\1\315\16\3\1\0\3\3\6\0\10\3\30\0\12\3"+
    "\1\316\16\3\1\0\3\3\6\0\1\3\1\317\6\3"+
    "\30\0\31\3\1\0\3\3\6\0\10\3\30\0\14\3"+
    "\1\320\14\3\1\0\3\3\6\0\10\3\30\0\17\3"+
    "\1\321\11\3\1\0\3\3\6\0\10\3\30\0\12\3"+
    "\1\322\16\3\1\0\3\3\6\0\10\3\30\0\14\3"+
    "\1\323\14\3\1\0\3\3\6\0\10\3\30\0\14\3"+
    "\1\324\14\3\1\0\3\3\6\0\1\3\1\325\6\3"+
    "\30\0\31\3\1\0\3\3\6\0\10\3\30\0\25\3"+
    "\1\326\3\3\1\0\3\3\6\0\10\3\30\0\14\3"+
    "\1\327\14\3\1\0\3\3\6\0\10\3\30\0\14\3"+
    "\1\330\14\3\1\0\3\3\6\0\10\3\30\0\10\3"+
    "\1\331\20\3\1\0\3\3\6\0\10\3\30\0\23\3"+
    "\1\332\5\3\1\0\3\3\6\0\10\3\30\0\16\3"+
    "\1\333\12\3\1\0\3\3\6\0\10\3\30\0\12\3"+
    "\1\334\16\3\1\0\3\3\6\0\10\3\30\0\11\3"+
    "\1\335\17\3\1\0\3\3\6\0\10\3\30\0\2\3"+
    "\1\336\26\3\1\0\3\3\6\0\10\3\30\0\1\3"+
    "\1\337\10\3\1\340\16\3\1\0\3\3\6\0\10\3"+
    "\30\0\14\3\1\341\14\3\1\0\3\3\6\0\10\3"+
    "\30\0\16\3\1\342\12\3\1\0\3\3\6\0\10\3"+
    "\30\0\14\3\1\343\14\3\1\0\3\3\6\0\10\3"+
    "\30\0\14\3\1\344\14\3\1\0\3\3\6\0\10\3"+
    "\30\0\17\3\1\345\11\3\1\0\3\3\6\0\10\3"+
    "\30\0\21\3\1\346\7\3\1\0\3\3\6\0\10\3"+
    "\30\0\14\3\1\347\14\3\1\0\3\3\6\0\10\3"+
    "\30\0\14\3\1\350\14\3\1\0\3\3\6\0\10\3"+
    "\30\0\30\3\1\351\1\0\3\3\6\0\10\3\30\0"+
    "\12\3\1\352\16\3\1\0\3\3\6\0\10\3\30\0"+
    "\16\3\1\353\12\3\1\0\3\3\6\0\10\3\30\0"+
    "\11\3\1\354\17\3\1\0\3\3\6\0\10\3\30\0"+
    "\21\3\1\355\7\3\1\0\3\3\6\0\10\3\30\0"+
    "\2\3\1\356\26\3\1\0\3\3\6\0\10\3\30\0"+
    "\21\3\1\357\7\3\1\0\3\3\6\0\10\3\30\0"+
    "\21\3\1\360\7\3\1\0\3\3\6\0\10\3\30\0"+
    "\16\3\1\361\12\3\1\0\3\3\6\0\10\3\30\0"+
    "\15\3\1\362\13\3\1\0\3\3\6\0\10\3\30\0"+
    "\11\3\1\363\17\3\1\0\3\3\6\0\10\3\30\0"+
    "\12\3\1\364\16\3\1\0\3\3\6\0\10\3\30\0"+
    "\1\365\30\3\1\0\3\3\6\0\10\3\30\0\16\3"+
    "\1\366\12\3\1\0\3\3\6\0\10\3\30\0\16\3"+
    "\1\367\12\3\1\0\3\3\6\0\10\3\30\0\26\3"+
    "\1\370\2\3\1\0\3\3\6\0\10\3\30\0\1\371"+
    "\30\3\1\0\3\3\6\0\10\3\30\0\23\3\1\372"+
    "\5\3\1\0\3\3\6\0\10\3\30\0\1\3\1\373"+
    "\27\3\1\0\3\3\6\0\10\3\30\0\12\3\1\374"+
    "\16\3\1\0\3\3\6\0\10\3\30\0\2\3\1\375"+
    "\26\3\1\0\3\3\6\0\10\3\30\0\16\3\1\376"+
    "\12\3\1\0\3\3\6\0\10\3\30\0\12\3\1\377"+
    "\16\3\1\0\3\3\6\0\10\3\30\0\23\3\1\u0100"+
    "\5\3\1\0\3\3\6\0\10\3\30\0\22\3\1\u0101"+
    "\6\3\1\0\3\3\6\0\10\3\30\0\12\3\1\u0102"+
    "\16\3\1\0\3\3\6\0\10\3\30\0\12\3\1\u0103"+
    "\16\3\1\0\3\3\6\0\10\3\30\0\23\3\1\u0104"+
    "\5\3\1\0\3\3\6\0\10\3\30\0\21\3\1\u0105"+
    "\7\3\1\0\3\3\6\0\10\3\30\0\12\3\1\u0106"+
    "\16\3\1\0\3\3\6\0\10\3\30\0\22\3\1\u0107"+
    "\6\3\1\0\3\3\6\0\10\3\30\0\12\3\1\u0108"+
    "\16\3\1\0\3\3\6\0\10\3\30\0\12\3\1\u0109"+
    "\16\3\1\0\3\3\6\0\10\3\30\0\10\3\1\u010a"+
    "\20\3\1\0\3\3\6\0\6\3\1\u010b\1\3\30\0"+
    "\31\3\1\0\3\3\6\0\10\3\30\0\12\3\1\u010c"+
    "\16\3\1\0\3\3\6\0\10\3\30\0\11\3\1\u010d"+
    "\17\3\1\0\3\3\6\0\10\3\30\0\16\3\1\u010e"+
    "\12\3\1\0\3\3\6\0\10\3\30\0\12\3\1\u010f"+
    "\16\3\1\0\3\3\6\0\10\3\30\0\11\3\1\u0110"+
    "\17\3\1\0\3\3\6\0\10\3\30\0\14\3\1\u0111"+
    "\14\3\1\0\3\3\6\0\10\3\30\0\16\3\1\u0112"+
    "\12\3\1\0\3\3\6\0\10\3\30\0\16\3\1\u0113"+
    "\12\3\1\0\3\3\6\0\10\3\30\0\17\3\1\u0114"+
    "\11\3\1\0\3\3\6\0\10\3\30\0\12\3\1\u0115"+
    "\16\3\1\0\3\3\6\0\10\3\30\0\10\3\1\u0116"+
    "\20\3\1\0\3\3\6\0\10\3\30\0\11\3\1\u0117"+
    "\17\3\1\0\3\3\6\0\10\3\30\0\14\3\1\u0118"+
    "\14\3\1\0\3\3\6\0\10\3\30\0\14\3\1\u0119"+
    "\14\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12261];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\5\1\2\11\12\1\2\11"+
    "\2\1\6\11\1\1\1\11\17\1\1\11\1\0\1\1"+
    "\3\0\12\1\5\11\1\1\2\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\3\11\51\1\1\11\14\1"+
    "\6\11\210\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HareLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 126: break;
          case 2: 
            { return HareTypes.IDENTIFIER;
            } 
            // fall through
          case 127: break;
          case 3: 
            { return HareTypes.UNDERSCORE;
            } 
            // fall through
          case 128: break;
          case 4: 
            { return HareTypes.DECIMAL_DIGITS;
            } 
            // fall through
          case 129: break;
          case 5: 
            { return HareTypes.DIVIDES;
            } 
            // fall through
          case 130: break;
          case 6: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 131: break;
          case 7: 
            { return HareTypes.AT;
            } 
            // fall through
          case 132: break;
          case 8: 
            { return HareTypes.NOT;
            } 
            // fall through
          case 133: break;
          case 9: 
            { return HareTypes.ASSIGN;
            } 
            // fall through
          case 134: break;
          case 10: 
            { return HareTypes.MULTIPLIES;
            } 
            // fall through
          case 135: break;
          case 11: 
            { return HareTypes.MODULUS;
            } 
            // fall through
          case 136: break;
          case 12: 
            { return HareTypes.AND;
            } 
            // fall through
          case 137: break;
          case 13: 
            { return HareTypes.ADDS;
            } 
            // fall through
          case 138: break;
          case 14: 
            { return HareTypes.EXCLUSIVE_OR;
            } 
            // fall through
          case 139: break;
          case 15: 
            { return HareTypes.INCLUSIVE_OR;
            } 
            // fall through
          case 140: break;
          case 16: 
            { return HareTypes.LESSER_THAN;
            } 
            // fall through
          case 141: break;
          case 17: 
            { return HareTypes.LARGER_THAN;
            } 
            // fall through
          case 142: break;
          case 18: 
            { return HareTypes.SUBSTRACTS;
            } 
            // fall through
          case 143: break;
          case 19: 
            { return HareTypes.EOS;
            } 
            // fall through
          case 144: break;
          case 20: 
            { return HareTypes.COMMA;
            } 
            // fall through
          case 145: break;
          case 21: 
            { return HareTypes.COLON;
            } 
            // fall through
          case 146: break;
          case 22: 
            { return HareTypes.BANG;
            } 
            // fall through
          case 147: break;
          case 23: 
            { return HareTypes.LB;
            } 
            // fall through
          case 148: break;
          case 24: 
            { return HareTypes.RB;
            } 
            // fall through
          case 149: break;
          case 25: 
            { return HareTypes.LP;
            } 
            // fall through
          case 150: break;
          case 26: 
            { return HareTypes.RP;
            } 
            // fall through
          case 151: break;
          case 27: 
            { return HareTypes.LBR;
            } 
            // fall through
          case 152: break;
          case 28: 
            { return HareTypes.RBR;
            } 
            // fall through
          case 153: break;
          case 29: 
            { return HareTypes.DOT;
            } 
            // fall through
          case 154: break;
          case 30: 
            { return HareTypes.QUESTION;
            } 
            // fall through
          case 155: break;
          case 31: 
            { return HareElementType.Companion.getCOMMENT();
            } 
            // fall through
          case 156: break;
          case 32: 
            { return HareTypes.DIVIDES_ASSIGN;
            } 
            // fall through
          case 157: break;
          case 33: 
            { return HareTypes.STRING_LITERAL;
            } 
            // fall through
          case 158: break;
          case 34: 
            { return HareTypes.FN_KW;
            } 
            // fall through
          case 159: break;
          case 35: 
            { return HareTypes.EQUAL;
            } 
            // fall through
          case 160: break;
          case 36: 
            { return HareTypes.MATCH_OP;
            } 
            // fall through
          case 161: break;
          case 37: 
            { return HareTypes.MULTIPLIES_ASSIGN;
            } 
            // fall through
          case 162: break;
          case 38: 
            { return HareTypes.MODULUS_ASSIGN;
            } 
            // fall through
          case 163: break;
          case 39: 
            { return HareTypes.AND_ASSIGN;
            } 
            // fall through
          case 164: break;
          case 40: 
            { return HareTypes.LOGICAL_AND;
            } 
            // fall through
          case 165: break;
          case 41: 
            { return HareTypes.PLUS_ASSIGN;
            } 
            // fall through
          case 166: break;
          case 42: 
            { return HareTypes.XOR_ASSIGN;
            } 
            // fall through
          case 167: break;
          case 43: 
            { return HareTypes.LOGICAL_XOR;
            } 
            // fall through
          case 168: break;
          case 44: 
            { return HareTypes.OR_ASSIGN;
            } 
            // fall through
          case 169: break;
          case 45: 
            { return HareTypes.LOGICAL_OR;
            } 
            // fall through
          case 170: break;
          case 46: 
            { return HareTypes.LESSER_EQUAL;
            } 
            // fall through
          case 171: break;
          case 47: 
            { return HareTypes.LEFT_SHIFT;
            } 
            // fall through
          case 172: break;
          case 48: 
            { return HareTypes.LARGER_EQUAL;
            } 
            // fall through
          case 173: break;
          case 49: 
            { return HareTypes.RIGHT_SHIFT;
            } 
            // fall through
          case 174: break;
          case 50: 
            { return HareTypes.MINUS_ASSIGN;
            } 
            // fall through
          case 175: break;
          case 51: 
            { return HareTypes.SCOPE;
            } 
            // fall through
          case 176: break;
          case 52: 
            { return HareTypes.NOT_EQUAL;
            } 
            // fall through
          case 177: break;
          case 53: 
            { return HareTypes.DOTDOT;
            } 
            // fall through
          case 178: break;
          case 54: 
            { return HareTypes.AS_KW;
            } 
            // fall through
          case 179: break;
          case 55: 
            { return HareTypes.IF_KW;
            } 
            // fall through
          case 180: break;
          case 56: 
            { return HareTypes.IS_KW;
            } 
            // fall through
          case 181: break;
          case 57: 
            { return HareTypes.I8_TYPE;
            } 
            // fall through
          case 182: break;
          case 58: 
            { return HareTypes.U8_TYPE;
            } 
            // fall through
          case 183: break;
          case 59: 
            { return HareTypes.OCTAL_DIGITS;
            } 
            // fall through
          case 184: break;
          case 60: 
            { return HareTypes.HEX_DIGITS;
            } 
            // fall through
          case 185: break;
          case 61: 
            { return HareTypes.BIN_DIGITS;
            } 
            // fall through
          case 186: break;
          case 62: 
            { return HareTypes.FOR_KW;
            } 
            // fall through
          case 187: break;
          case 63: 
            { return HareTypes.F64_TYPE;
            } 
            // fall through
          case 188: break;
          case 64: 
            { return HareTypes.F32_TYPE;
            } 
            // fall through
          case 189: break;
          case 65: 
            { return HareTypes.LOGICAL_AND_ASSIGN;
            } 
            // fall through
          case 190: break;
          case 66: 
            { return HareTypes.LOGICAL_XOR_ASSIGN;
            } 
            // fall through
          case 191: break;
          case 67: 
            { return HareTypes.LOGICAL_OR_ASSIGN;
            } 
            // fall through
          case 192: break;
          case 68: 
            { return HareTypes.LEFT_SHIFT_ASSIGN;
            } 
            // fall through
          case 193: break;
          case 69: 
            { return HareTypes.RIGHT_SHIFT_ASSIGN;
            } 
            // fall through
          case 194: break;
          case 70: 
            { return HareTypes.DOTDOTDOT;
            } 
            // fall through
          case 195: break;
          case 71: 
            { return HareTypes.STR_TYPE;
            } 
            // fall through
          case 196: break;
          case 72: 
            { return HareTypes.I16_TYPE;
            } 
            // fall through
          case 197: break;
          case 73: 
            { return HareTypes.I64_TYPE;
            } 
            // fall through
          case 198: break;
          case 74: 
            { return HareTypes.I32_TYPE;
            } 
            // fall through
          case 199: break;
          case 75: 
            { return HareTypes.INT_TYPE;
            } 
            // fall through
          case 200: break;
          case 76: 
            { return HareTypes.U16_TYPE;
            } 
            // fall through
          case 201: break;
          case 77: 
            { return HareTypes.USE_KW;
            } 
            // fall through
          case 202: break;
          case 78: 
            { return HareTypes.U64_TYPE;
            } 
            // fall through
          case 203: break;
          case 79: 
            { return HareTypes.U32_TYPE;
            } 
            // fall through
          case 204: break;
          case 80: 
            { return HareTypes.LEN_KW;
            } 
            // fall through
          case 205: break;
          case 81: 
            { return HareTypes.LET_KW;
            } 
            // fall through
          case 206: break;
          case 82: 
            { return HareTypes.DEF_KW;
            } 
            // fall through
          case 207: break;
          case 83: 
            { return HareTypes.FINI_ATTR;
            } 
            // fall through
          case 208: break;
          case 84: 
            { return HareTypes.FREE_KW;
            } 
            // fall through
          case 209: break;
          case 85: 
            { return HareTypes.BOOL_TYPE;
            } 
            // fall through
          case 210: break;
          case 86: 
            { return HareTypes.SIZE_TYPE;
            } 
            // fall through
          case 211: break;
          case 87: 
            { return HareTypes.INIT_ATTR;
            } 
            // fall through
          case 212: break;
          case 88: 
            { return HareTypes.UINT_TYPE;
            } 
            // fall through
          case 213: break;
          case 89: 
            { return HareTypes.NULL_KW;
            } 
            // fall through
          case 214: break;
          case 90: 
            { return HareTypes.TEST_ATTR;
            } 
            // fall through
          case 215: break;
          case 91: 
            { return HareTypes.TRUE_KW;
            } 
            // fall through
          case 216: break;
          case 92: 
            { return HareTypes.TYPE_KW;
            } 
            // fall through
          case 217: break;
          case 93: 
            { return HareTypes.ENUM_KW;
            } 
            // fall through
          case 218: break;
          case 94: 
            { return HareTypes.ELSE_KW;
            } 
            // fall through
          case 219: break;
          case 95: 
            { return HareTypes.RUNE_KW;
            } 
            // fall through
          case 220: break;
          case 96: 
            { return HareTypes.VOID_TYPE;
            } 
            // fall through
          case 221: break;
          case 97: 
            { return HareTypes.CASE_KW;
            } 
            // fall through
          case 222: break;
          case 98: 
            { return HareTypes.CHAR_TYPE;
            } 
            // fall through
          case 223: break;
          case 99: 
            { return HareTypes.FALSE_KW;
            } 
            // fall through
          case 224: break;
          case 100: 
            { return HareTypes.BREAK_KW;
            } 
            // fall through
          case 225: break;
          case 101: 
            { return HareTypes.ABORT_KW;
            } 
            // fall through
          case 226: break;
          case 102: 
            { return HareTypes.ALLOC_KW;
            } 
            // fall through
          case 227: break;
          case 103: 
            { return HareTypes.UNION_KW;
            } 
            // fall through
          case 228: break;
          case 104: 
            { return HareTypes.VAARG_KW;
            } 
            // fall through
          case 229: break;
          case 105: 
            { return HareTypes.VAEND_KW;
            } 
            // fall through
          case 230: break;
          case 106: 
            { return HareTypes.CONST_KW;
            } 
            // fall through
          case 231: break;
          case 107: 
            { return HareTypes.DEFER_KW;
            } 
            // fall through
          case 232: break;
          case 108: 
            { return HareTypes.YIELD_KW;
            } 
            // fall through
          case 233: break;
          case 109: 
            { return HareTypes.MATCH_KW;
            } 
            // fall through
          case 234: break;
          case 110: 
            { return HareTypes.OFFSET_KW;
            } 
            // fall through
          case 235: break;
          case 111: 
            { return HareTypes.ASSERT_KW;
            } 
            // fall through
          case 236: break;
          case 112: 
            { return HareTypes.APPEND_KW;
            } 
            // fall through
          case 237: break;
          case 113: 
            { return HareTypes.STATIC_KW;
            } 
            // fall through
          case 238: break;
          case 114: 
            { return HareTypes.STRUCT_KW;
            } 
            // fall through
          case 239: break;
          case 115: 
            { return HareTypes.SWITCH_KW;
            } 
            // fall through
          case 240: break;
          case 116: 
            { return HareTypes.INSERT_KW;
            } 
            // fall through
          case 241: break;
          case 117: 
            { return HareTypes.EXPORT_KW;
            } 
            // fall through
          case 242: break;
          case 118: 
            { return HareTypes.RETURN_KW;
            } 
            // fall through
          case 243: break;
          case 119: 
            { return HareTypes.VALIST_TYPE;
            } 
            // fall through
          case 244: break;
          case 120: 
            { return HareTypes.DELETE_KW;
            } 
            // fall through
          case 245: break;
          case 121: 
            { return HareTypes.UINTPTR_TYPE;
            } 
            // fall through
          case 246: break;
          case 122: 
            { return HareTypes.VASTART_KW;
            } 
            // fall through
          case 247: break;
          case 123: 
            { return HareTypes.NORETURN_ATTR;
            } 
            // fall through
          case 248: break;
          case 124: 
            { return HareTypes.NULLABLE_KW;
            } 
            // fall through
          case 249: break;
          case 125: 
            { return HareTypes.CONTINUE_KW;
            } 
            // fall through
          case 250: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

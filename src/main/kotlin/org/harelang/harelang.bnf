{
    parserClass = "org.harelang.parser.HareParser"
    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "Hare"
    psiImplClassSuffix = "Impl"
    psiPackage = "org.harelang.parser.psi"
    psiImplPackage = "org.harelang.parser.psi"

    elementTypeHolderClass = "org.harelang.parser.psi.HareTypes"
    elementTypeClass = "org.harelang.parser.psi.HareElementType"
    tokenTypeClass = "org.harelang.parser.psi.HareTokenType"

    psiImplUtilClass="org.harelang.parser.psi.HarePsiImplUtil"
}

translation_unit ::= imports* declarations*

imports ::= (use_statement_member_list | use_statement)+
use_statement ::= USE_KW import_alias* import_path (SCOPE "*")? EOS {
pin=1
}
symbol ::= IDENTIFIER {
    mixin='org.harelang.reference.SymbolMixin'
}
use_statement_member_list ::= USE_KW import_alias* import_path SCOPE LBR member_list RBR EOS
member_list ::= member (COMMA member)*
member ::= IDENTIFIER ASSIGN IDENTIFIER | IDENTIFIER
import_alias ::= IDENTIFIER ASSIGN
import_path ::= IDENTIFIER (SCOPE IDENTIFIER)* {
    implements=['com.intellij.psi.PsiNameIdentifierOwner']
    mixin='org.harelang.reference.ImportPathMixin'
}
identifier_path ::= IDENTIFIER (SCOPE IDENTIFIER)*
private identifier_path_symbol ::= symbol (SCOPE symbol)*

declarations ::= general_declaration+
private general_declaration ::= EXPORT_KW? declaration EOS {
pin=2
}
declaration ::= function_declaration | global_declaration | constant_declaration | type_declaration

global_declaration ::= global_let_bindings | global_const_bindings
private global_let_bindings ::= LET_KW global_bindings {
pin=1
}
private global_const_bindings ::= CONST_KW global_bindings {
pin=1
}
global_bindings ::= global_binding (COMMA global_binding)*
global_binding ::= decl_attr? identifier_path COLON type (ASSIGN expression)? {
    implements=['com.intellij.psi.PsiNameIdentifierOwner']
    mixin='org.harelang.reference.GlobalBindingMixin'
}
decl_attr ::= SYMBOL_ATTR LP string_const RP
constant_declaration ::= DEF_KW constant_bindings {
pin=1
}
constant_bindings ::= constant_binding (COMMA constant_binding)*
constant_binding ::= identifier_path COLON type ASSIGN expression {
    pin=2
    implements=['com.intellij.psi.PsiNameIdentifierOwner']
    mixin='org.harelang.reference.GlobalBindingMixin'
}

type_declaration ::= TYPE_KW type_bindings
type_bindings ::= type_binding (COMMA type_binding)*
type_binding ::= identifier_path ASSIGN type {
    implements=['com.intellij.psi.PsiNameIdentifierOwner']
    mixin='org.harelang.reference.GlobalBindingMixin'
}
function_declaration ::= fndec_attr* FN_KW identifier_path prototype function_definition? {
    pin=2
    implements=['com.intellij.psi.PsiNameIdentifierOwner']
    mixin='org.harelang.reference.GlobalBindingMixin'
}
private function_definition ::= ASSIGN expression {
pin=1
}

fndec_attr ::= (FINI_ATTR | TEST_ATTR | INIT_ATTR) | fntype_attr | decl_attr
fntype_attr ::= NORETURN_ATTR

prototype ::= LP parameter_list? RP type {
pin=1
}

parameter_list ::= parameters COMMA? DOTDOTDOT? COMMA?
parameters ::= parameter (COMMA parameter)*
parameter ::= (IDENTIFIER | UNDERSCORE) COLON type {
pin=1
implements=['com.intellij.psi.PsiNameIdentifierOwner']
    mixin='org.harelang.reference.ParameterMixin'
}
type ::= CONST_KW? BANG? storage_class
storage_class ::= scala_type | struct_union_type | tuple_type | tagged_union_type | slice_array_type | function_type | alias_type | unwrapped_alias | STR_TYPE

scala_type ::= integer_type | floating_type | enum_type  | pointer_type | RUNE_KW | BOOL_TYPE | VALIST_TYPE |  VOID_TYPE | NULL_KW

integer_type ::= I8_TYPE | I16_TYPE | I32_TYPE | I64_TYPE | U8_TYPE | U16_TYPE | U32_TYPE | U64_TYPE | INT_TYPE | UINT_TYPE | SIZE_TYPE | UINTPTR_TYPE | CHAR_TYPE

floating_type ::= F32_TYPE | F64_TYPE

enum_type ::= ENUM_KW enum_storage? LBR enum_values RBR
enum_values ::= enum_value (COMMA enum_value)* COMMA?
enum_value ::= IDENTIFIER ASSIGN expression | IDENTIFIER {
    implements=['com.intellij.psi.PsiNameIdentifierOwner']
    mixin='org.harelang.reference.EnumValueMixin'
}
enum_storage ::= integer_type | RUNE_KW

pointer_type ::= NULLABLE_KW? MULTIPLIES type

struct_union_type ::= (STRUCT_KW | UNION_KW) LBR struct_union_fields RBR {
pin=1
}
struct_union_fields ::=  struct_union_field (COMMA struct_union_field)* COMMA?
struct_union_field ::= struct_union_field_type_def | struct_union_type | identifier_path {
implements=['com.intellij.psi.PsiNameIdentifierOwner']
    mixin='org.harelang.reference.StructFieldMixin'
}
private struct_union_field_type_def ::= IDENTIFIER COLON type {
pin=2
}
tuple_type ::= LP tuple_types RP
tuple_types ::= type (COMMA type)+ COMMA?

tagged_union_type ::= LP tagged_types RP
tagged_types ::= type (INCLUSIVE_OR type)+

slice_array_type ::= LB (expression | MULTIPLIES | UNDERSCORE)? RB type

function_type ::= fntype_attr? FN_KW prototype

alias_type ::= identifier_path_symbol
unwrapped_alias ::= DOTDOTDOT identifier_path_symbol
constant ::= floating_constant | integer_constant | string_const | rune_constant | NULL_KW | TRUE_KW | FALSE_KW | VOID_TYPE
integer_constant ::= (DECIMAL_DIGITS | OCTAL_DIGITS | HEX_DIGITS | BIN_DIGITS) integer_suffix?
integer_suffix ::= "i" | "u" | "z" | "i8" | "i16" | "i32" | "i64" | "u8" | "u16" | "u32" | "u64"
string_const ::= (STRING_LITERAL | RAWSTRING)+

floating_constant ::= DECIMAL_DIGITS DOT DECIMAL_DIGITS exponent? (F32_TYPE | F64_TYPE)? | DECIMAL_DIGITS exponent? (F32_TYPE | F64_TYPE) | DECIMAL_DIGITS IDENTIFIER
exponent ::= ("e" | "E") (ADDS | SUBSTRACTS)? DECIMAL_DIGITS | IDENTIFIER

rune_constant ::= RUNE_LITERAL
expression ::= assignment | binding_list | logical_or_expression | if_expression | for_loop | control_expression

private logical_or_expression ::= logical_xor_expression (LOGICAL_OR logical_xor_expression)*
private logical_xor_expression ::= logical_and_expression (LOGICAL_XOR logical_and_expression)*
private logical_and_expression ::= equality_expression (LOGICAL_AND equality_expression)*
private equality_expression ::= comparison_expression (equality_operator comparison_expression)*
private equality_operator ::= EQUAL | NOT_EQUAL
private comparison_expression ::= inclusive_or_expression (comparison_operator inclusive_or_expression)*
private comparison_operator ::= LESSER_THAN | LARGER_THAN | LESSER_EQUAL | LARGER_EQUAL
private inclusive_or_expression ::= exclusive_or_expression (INCLUSIVE_OR exclusive_or_expression)*
private exclusive_or_expression ::= and_expression (EXCLUSIVE_OR and_expression)*
private and_expression ::= shift_expression (AND shift_expression)*
private shift_expression ::= additive_expression (shift_operator additive_expression)*
private shift_operator ::= LEFT_SHIFT | RIGHT_SHIFT
private additive_expression ::= multiplicative_expression (additive_operator multiplicative_expression)*
private additive_operator ::= ADDS | SUBSTRACTS
private multiplicative_expression ::= cast_expression (multiplicative_operator cast_expression)*
private multiplicative_operator ::= MULTIPLIES | DIVIDES | MODULUS
private cast_expression ::= unary_expression (COLON type | AS_KW type | IS_KW type)*
private unary_expression ::=
                            buildin_expression |
                            compound_expression |
                            match_expression |
                            switch_expression |
                            unary_operator unary_expression
unary_operator ::= ADDS | SUBSTRACTS | NOT | BANG | MULTIPLIES | AND
private buildin_expression ::= variadic_expression |
                                                           slice_mutation_expression |
                                                           measurement_expression |
                                                           defer_expression |
                                                           assertion_expression |
                                                           alloc_expression | postfix_expression
private postfix_expression ::= nested_expression postfix_op*
private nested_expression ::= plan_expression | LP tuple_items RP | LP expression RP
plan_expression ::= struct_literal | enum_literal | symbol | constant | array_literal
array_literal ::= LB array_members? RB
array_members ::= expression (COMMA expression)* DOTDOTDOT? COMMA?
enum_literal ::= symbol (SCOPE symbol)+

struct_literal ::= STRUCT_KW LBR field_values COMMA? RBR | identifier_path LBR struct_initializer COMMA? RBR
field_values ::= field_value (COMMA field_value)*
field_value ::= struct_literal | IDENTIFIER (COLON type)? ASSIGN expression
struct_initializer ::= field_values (COMMA DOTDOTDOT)? | DOTDOTDOT

tuple_items ::= expression (COMMA expression)+ COMMA?
postfix_op ::= field_access_op | slicing_op | indexing_op | call_op | error_propagation_op
indexing_op ::= LB expression RB
slicing_op ::= LB expression? DOTDOT expression? RB
error_propagation_op ::= QUESTION | BANG
field_access_op ::= DOT IDENTIFIER | DOT integer_constant {
    mixin='org.harelang.reference.FieldAccessMixin'

}

slicing_expression ::= nested_expression slicing_op
alloc_expression ::= ALLOC_KW LP (expression COMMA expression | expression DOTDOTDOT | expression) RP | FREE_KW LP expression RP
assertion_expression ::= STATIC_KW? ASSERT_KW LP (expression COMMA string_const | expression) RP | STATIC_KW? ABORT_KW LP string_const? RP
defer_expression ::= DEFER_KW expression {
pin=1
}

measurement_expression ::= size_expression | length_expression | offset_expression
size_expression ::= SIZE_TYPE LP type RP
length_expression ::= LEN_KW LP expression RP
offset_expression ::= OFFSET_KW LP expression RP

slice_mutation_expression ::= append_expression | insert_expression | delete_expression
append_expression ::= STATIC_KW? APPEND_KW LP expression COMMA (expression COMMA expression | expression DOTDOTDOT | expression) RP
insert_expression ::= STATIC_KW? INSERT_KW LP expression COMMA expression DOTDOTDOT? RP
delete_expression ::= STATIC_KW? DELETE_KW LP expression RP

variadic_expression ::= VASTART_KW LP RP | VAARG_KW LP expression RP | VAEND_KW LP expression RP
match_expression ::= MATCH_KW LP expression RP LBR match_case+ RBR {
pin=1
}
match_case ::= CASE_KW ((LET_KW IDENTIFIER COLON)? type)? MATCH_OP expression_list {
pin=1
implements=['com.intellij.psi.PsiNameIdentifierOwner']
    mixin='org.harelang.reference.MatchCaseMixin'
}
switch_expression ::= SWITCH_KW LP expression RP LBR switch_case+ RBR
switch_case ::= CASE_KW case_options? MATCH_OP expression_list
case_options ::= expression (COMMA expression)*

compound_expression ::= label? LBR expression_list RBR {
pin=2
}
label ::= COLON IDENTIFIER
expression_list ::= expression_with_ending+
private expression_with_ending ::= expression EOS {
pin=1
}
binding_list ::= let_bindings | const_bindings
private let_bindings ::= STATIC_KW* LET_KW bindings {
pin=2
}
private const_bindings ::= STATIC_KW* CONST_KW bindings {
pin=2
}
bindings ::= binding (COMMA binding)*
binding ::= binding1 | binding2 {
implements=['com.intellij.psi.PsiNameIdentifierOwner']
    mixin='org.harelang.reference.BindingMixin'

}

private binding1 ::= IDENTIFIER (COLON type)? ASSIGN expression {
pin = 1
}
private binding2 ::= LP IDENTIFIER (COMMA IDENTIFIER)+ RP ASSIGN expression {
pin = 1
}

assignment ::= object_selector assignment_op expression | MULTIPLIES unary_expression assignment_op expression | slicing_expression ASSIGN expression
assignment_op ::=  ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULTIPLIES_ASSIGN | DIVIDES_ASSIGN |
MODULUS_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | LEFT_SHIFT_ASSIGN | RIGHT_SHIFT_ASSIGN | LOGICAL_AND_ASSIGN |
LOGICAL_OR_ASSIGN | LOGICAL_XOR_ASSIGN
object_selector ::=  nested_expression (field_access_op | slicing_op | indexing_op)* | IDENTIFIER

if_expression ::=  IF_KW conditional_branch ELSE_KW if_expression | IF_KW conditional_branch ELSE_KW expression | IF_KW conditional_branch
conditional_branch ::= LP expression RP expression

for_loop ::= FOR_KW LP for_predicate RP expression {
pin=1
}
for_predicate ::= binding_list EOS expression EOS expression | binding_list EOS expression | expression EOS expression | expression

call_op ::= LP argument_list? RP
argument_list ::= expression (COMMA expression)* DOTDOTDOT? COMMA?

control_expression ::= BREAK_KW label? | CONTINUE_KW label? | RETURN_KW expression? | yield_expression
yield_expression ::= YIELD_KW ((label COMMA expression) | expression | label)?